/* Copyright (C) 2019 Greenbone Networks GmbH
 *
 * SPDX-License-Identifier: GPL-2.0-or-later
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */

import ReportVulnerability from '../vulnerability';

describe('ReportVulnerability tests', () => {
  test('should initialize hosts', () => {
    const vulnerability1 = new ReportVulnerability();

    expect(vulnerability1.hosts).toBeDefined();
    expect(vulnerability1.hosts.hostsByIp).toBeDefined();
    expect(vulnerability1.hosts.count).toEqual(0);

    const vulnerability2 = ReportVulnerability.fromElement();

    expect(vulnerability2.hosts).toBeDefined();
    expect(vulnerability2.hosts.hostsByIp).toBeDefined();
    expect(vulnerability2.hosts.count).toEqual(0);
  });

  test('should initialize results', () => {
    const vulnerability1 = new ReportVulnerability();

    expect(vulnerability1.results).toBeDefined();
    expect(vulnerability1.results.count).toEqual(1);

    const vulnerability2 = ReportVulnerability.fromElement();

    expect(vulnerability2.results).toBeDefined();
    expect(vulnerability2.results.count).toEqual(1);
  });

  test('should add hosts', () => {
    const vulnerability = ReportVulnerability.fromElement();

    expect(vulnerability.hosts).toBeDefined();
    expect(vulnerability.hosts.hostsByIp).toEqual({});
    expect(vulnerability.hosts.count).toEqual(0);

    const host = {name: 'foo', ip: '1.2.3.4'};
    vulnerability.addHost(host);

    expect(vulnerability.hosts.hostsByIp['1.2.3.4']).toEqual(host);
    expect(vulnerability.hosts.count).toEqual(1);
  });

  test('should add results', () => {
    const vulnerability = ReportVulnerability.fromElement();

    vulnerability.addResult({});
    vulnerability.addResult();

    expect(vulnerability.results.count).toEqual(3);
  });

  test('should allow to set severity', () => {
    const vulnerability = ReportVulnerability.fromElement();

    expect(vulnerability.severity).toBeUndefined();

    vulnerability.setSeverity(5.5);

    expect(vulnerability.severity).toEqual(5.5);

    vulnerability.setSeverity(3.5);

    expect(vulnerability.severity).toEqual(5.5);

    vulnerability.setSeverity(9.5);

    expect(vulnerability.severity).toEqual(9.5);
  });

  test('should parse oid as id', () => {
    const vulnerability = ReportVulnerability.fromElement({
      nvt: {_oid: '1.2.3'},
    });

    expect(vulnerability.id).toEqual('1.2.3');
  });

  test('should parse name', () => {
    const vulnerability = ReportVulnerability.fromElement({name: 'foo'});

    expect(vulnerability.name).toEqual('foo');
  });

  test('should parse QoD', () => {
    const vulnerability = ReportVulnerability.fromElement({
      qod: {type: 'foo', value: '4.5'},
    });

    expect(vulnerability.qod).toBeDefined();
    expect(vulnerability.qod.type).toEqual('foo');
    expect(vulnerability.qod.value).toEqual(4.5);
  });
});
